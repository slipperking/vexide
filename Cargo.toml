[package]
name = "examples"
edition = "2021"
version = "0.0.1"

[dev-dependencies]
vexide = { path = "packages/vexide" }

[workspace]
members = ["packages/*"]
resolver = "2"

[workspace.dependencies]
snafu = { version = "0.8.0", default-features = false, features = [
    "rust_1_61",
    "unstable-core-error",
] }
vexide-runtime = { version = "0.0.1", path = "packages/vexide-runtime", default-features = false }
vexide-devices = { version = "0.4.1", path = "packages/vexide-devices", default-features = false }
vexide-graphics = { version = "0.1.4", path = "packages/vexide-graphics", default-features = false }
vexide-macro = { version = "0.3.0", path = "packages/vexide-macro", default-features = false }
vex-sdk = "0.26.0"
no_std_io = { version = "0.6.0", features = ["alloc"] }

[workspace.lints.rust]
rust_2018_idioms = { level = "warn", priority = -1 }
rust_2024_compatibility = { level = "warn", priority = -1 }
future_incompatible = { level = "warn", priority = -1 }
let_underscore = { level = "warn", priority = -1 }
missing_docs = "warn"
unsafe_op_in_unsafe_fn = "deny"
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(target_vendor, values("vex"))',
] }

[workspace.lints.clippy]
missing_const_for_fn = "warn"
pedantic = { level = "warn", priority = -1 }
module_name_repetitions = "allow"
doc_markdown = "allow"
cast_possible_truncation = "allow"
cast_sign_loss = "allow"
missing_panics_doc = "allow"
cast_possible_wrap = "allow"
match_bool = "allow"
